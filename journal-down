#!/bin/bash

# Copyright (c) 2017 David Drake
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# journal-down.php
# https://github.com/randomdrake/journal-down
#
# Written by David Drake
# https://randomdrake.com
# https://twitter.com/randomdrake
#
# Tested on macOS Sierra 10.12.6
# MacDown 0.7.1

# This is JournalDown.
#
# This script does a couple simple things:
#
# 1. Create a new file in the provided journal directory in this format:
#
#    /YYYY/MM/YYYY-MM-DD.md like /2017/09/2017-09-10.md
#
#    with a heading containing the day in this format:
#
#    Fullmonth DDth, YYYY - Dayofweek like: # September 10th, 2017 - Sunday
#
# 2. Every time the command is run, newlines and a time subheading are
#    appended to the file in this format:
#
#    ## HH:MM pm
#
# Requires: macOS, MacDown, iCloud Backups
#
# journal-down -h for help.

# Simple function get get day suffix
DaySuffix() {
    case `date +%d` in
        1|21|31) echo "st";;
        2|22)    echo "nd";;
        3|23)    echo "rd";;
        *)       echo "th";;
    esac
}

# We are using date parts for the filename as well as headers, so make sure we don't
# hit a race condition by doing a single date call and allow for two-word days or months.
IFS=$'\n' read -rd '' year month day time_of_day am_pm month_name day_of_week < <(date $'+%Y\n%m\n%d\n%I:%M\n%p\n%B\n%A';printf '\0')
journal_filename="$HOME/Library/Mobile Documents/com~apple~CloudDocs/JournalDown/$year/$month/$year-$month-$day.md"

# Handle arguments
while getopts ":hor:" opt; do
    case $opt in
        h)
            printf "\nThis is JournalDown. Journal in Markdown, using MacDown, backed up to your iCloud.\n\n"
            printf "Requires:\n"
            printf "    MacDown - The open source Markdown editor for macOS.\n"
            printf "    https://macdown.uranusjr.com or with Homebrew Cask: brew cask install macdown\n"
            printf "    Default iCloud Storage configuration.\n\n"
            printf "Usage:\n"
            printf "    journal-down                      Open journal file for today with a new timestamp.\n"
            printf "    journal-down -h                   Display this help message.\n"
            printf "    journal-down -o                   Open journal for today without creating timestamp.\n"
            printf "    journal-down -r <YYYY-MM-DD>      Open a journal for a previous valid date like: 2017-09-10.\n\n"
            exit 0
            ;;
        o)
            /Applications/Macdown.app/Contents/SharedSupport/bin/macdown "$journal_filename"
            exit 0
            ;;
        r)
            # Check to see if the date is valid. BSD Date doesn't have -d, this is a workaround.
            date -f "%Y-%m-%d" -j "$OPTARG" >/dev/null 2>&1
            date_valid=$?
            if [[ $date_valid == 0 ]]; then
                IFS='-' read -ra date_parts <<< "$OPTARG"
                year=${date_parts[0]}
                month=${date_parts[1]}
                day=${date_parts[2]}

                journal_filename="$HOME/Library/Mobile Documents/com~apple~CloudDocs/Journal/$year/$month/$year-$month-$day.md"
                if [[ -e "$journal_filename" ]]; then
                    /Applications/Macdown.app/Contents/SharedSupport/bin/macdown "$journal_filename"
                else
                    echo "File does not exist: $journal_filename"
                    exit 1
                fi
            fi
            echo "${date_parts[0]}"
            exit 0
            /Applications/Macdown.app/Contents/SharedSupport/bin/macdown "$journal_filename"
            exit 0
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

file_header="$month_name $day"$(DaySuffix)", $year - $day_of_week"
time_header="$time_of_day $am_pm"

# Create our directory and subdirectories, if they don't exist
mkdir -p "$(dirname "$journal_filename")"

# If our file doesn't exist, create it and put the header on the top
if ! [[ -e "$journal_filename" ]]; then
    touch "$journal_filename"
    printf "# $file_header\n" >> "$journal_filename"
fi

# Add our timestamp prompt to the journal
printf "\n\n## $time_header\n\n" >> "$journal_filename"

# Open our journal file in MacDown using included helper script.
# From: https://github.com/MacDownApp/macdown/wiki/Advanced-Usage
/Applications/Macdown.app/Contents/SharedSupport/bin/macdown "$journal_filename"
